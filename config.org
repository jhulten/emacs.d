#+TITLE: Jeffrey Hulten's Emacs configuration
#+OPTIONS: toc:4 h:4

* Configuration
** About this file
   :PROPERTIES:
   :CUSTOM_ID: babel-init
   :END:
<<babel-init>>

Inspired by the [[http://eschulte.me/emacs24-starter-kit/#installation][Emacs Starter Kit]] and [[https://github.com/sachac/.emacs.d/blob/master/Sacha.org][Sacha Chua's Emacs configuration]], I set up my configuration file using Org-babel. You could load it with =(org-babel-load-file "/path/to/file")=, changing the path appropriately, but you'll probably want to tweak it extensively first.

** Personal information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jeffrey Hulten"
      user-mail-address "jhulten@gmail.com")
#+END_SRC

** Packages

#+BEGIN_SRC emacs-lisp
(require 'package) ;; You might already have this line
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(package-initialize) ;; You might already have this line
#+END_SRC

** Theme

I prefer the dark solarized theme for most of my character interfaces (terminal, emacs, etc.)

#+BEGIN_SRC emacs-lisp
(load-theme 'solarized-dark t)
#+END_SRC

** Backups

#+BEGIN_SRC emacs-lisp

(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

#+END_SRC

** Evil Mode

#+BEGIN_SRC emacs-lisp
; Use evil mode
(require 'evil)
(evil-mode t)

; Set cursor colors depending on mode
(when (display-graphic-p)
  (setq evil-emacs-state-cursor '("red" box))
  (setq evil-normal-state-cursor '("green" box))
  (setq evil-visual-state-cursor '("orange" box))
  (setq evil-insert-state-cursor '("red" bar))
  (setq evil-replace-state-cursor '("red" bar))
  (setq evil-operator-state-cursor '("red" hollow))
)

(global-evil-leader-mode)
(evil-leader/set-leader ",")

;; (evil-leader/set-key-for-mode 'emacs-lisp-mode "b" 'byte-compile-file)

(evil-leader/set-key
  "e" 'helm-find-file
  "p" 'helm-projectile
  "v" 'magit-status)

(require 'evil-surround)
(global-evil-surround-mode 1)
#+END_SRC

** YASnippets

#+BEGIN_SRC emacs-lisp
(require 'yasnippet)

(setq yas-snippet-dirs
      '("~/.emacs.d/snippets"                 ;; personal snippets
      yas-installed-snippets-dir
      ))

(yas-global-mode 1)
#+END_SRC

** Helm

#+BEGIN_SRC emacs-lisp
(require 'helm)

(require 'helm-config)

;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i")   'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-z")   'helm-select-action) ; list actions using C-z

(when (executable-find "curl")
  (setq helm-google-suggest-use-curl-p t))

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t)

(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "M-x") 'helm-M-x)

(global-set-key (kbd "C-x b") 'helm-mini)

(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)

(helm-mode 1)
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
;; (setq helm-projectile-fuzzy-match nil)
;; (require 'org-projectile)

(setq projectile-keymap-prefix (kbd "C-c p"))
(projectile-global-mode)

(require 'helm-projectile)
(helm-projectile-on)
#+END_SRC

** Languages

*** Ruby

#+BEGIN_SRC emacs-lisp

(setq rbenv-installation-dir "/usr/local")

(require 'rbenv)
(global-rbenv-mode)

(setq rbenv-show-active-ruby-in-modeline nil)

(require 'rspec-mode)
(eval-after-load 'rspec-mode
  '(rspec-install-snippets))

#+END_SRC

*** Clojure

#+BEGIN_SRC emacs-lisp

;; Clojure setup
(add-hook 'cider-mode-hook #'eldoc-mode)
(setq nrepl-log-messages t)
(setq nrepl-hide-special-buffers t)
;;(setq cider-repl-result-prefix ";; => ")
(setq cider-test-show-report-on-success t)

#+END_SRC


** OrgMode

#+BEGIN_SRC emacs-lisp

(require 'org)

;; Workaround http://wenshanren.org/?p=781
(defun org-font-lock-ensure ()
  (font-lock-fontify-buffer))

;; utf-8 standard...
(setq org-export-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-charset-priority 'unicode)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))

(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

;; Save all org buffers every ten minutes
(run-at-time "10 min" 600 'org-save-all-org-buffers)

(setq org-id-method (quote uuidgen))

(setq org-cycle-separator-lines 0)

(setq org-enforce-todo-dependencies t)

; Use IDO for both buffer and file completion and ido-everywhere to t
;;(setq org-completion-use-ido t)

; Use the current window for indirect buffer display
(setq org-indirect-buffer-display 'current-window)

(setq org-emphasis-alist (quote (("*" bold "<b>" "</b>")
                                 ("/" italic "<i>" "</i>")
                                 ("_" underline "<span style=\"text-decoration:underline;\">" "</span>")
                                 ("+" strike-through "<del>" "</del>")
                                 ("=" org-code "<code>" "</code>" verbatim)
                                 ("~" org-verbatim "<code>" "</code>" verbatim))))

(setq org-catch-invisible-edits 'show)

;; Create ids when linking
(setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
;; And delete them when cloning
(setq org-clone-delete-id t)

;; org-mode: Modules: List to include in orgmode
(setq org-modules (quote (org-bbdb
                          org-bibtex
                          org-crypt
                          org-gnus
                          org-id
                          org-info
                          org-habit
                          ;; org-inlinetask
                          ;; org-irc
                          org-protocol
                          org-rmail
                          org-w3m)))

(setq org-deadline-warning-days 30)

; My flow of given todos...
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "DOING(s)" "|" "DONE(d)")
              (sequence "|" "CANCELLED(c@/!)")
              (type "PROJECT(p)" "BLOCKED(b@/!)" "SOMEDAY(y!)")
              (type "PHONE" "MEETING" "NOTE"))))

; Colors good!
(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "yellow")
              ("NEXT" :foreground "orange" :weight bold)
              ("DOING" :foreground "firebrick3" :weight bold)
              ("DONE" :foreground "forest green" :weight bold :strike-through "green")
              ("CANCELLED" :foreground "forest green" :weight bold :strike-through "red")
              ;; typed todos
              ("PROJECT" :foreground "gray" :weight bold)
              ("BLOCKED" :foreground "red" :weight bold)
              ("SOMEDAY" :foreground "plum3" :weight bold)
              ("MEETING" :foreground "blue" :slant italic)
              ("PHONE" :foreground "blue" :slant italic)
              ("NOTE" :foreground "blue"))))

(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("SOMEDAY" ("SOMEDAY" . t))
              ("BLOCKED" ("SOMEDAY") ("BLOCKED" . t))
              (done ("BLOCKED") ("SOMEDAY"))
              ("TODO" ("BLOCKED") ("CANCELLED") ("SOMEDAY"))
              ("NEXT" ("BLOCKED") ("CANCELLED") ("SOMEDAY"))
              ("DOING" ("BLOCKED") ("CANCELLED") ("SOMEDAY"))
              ("PROJECT" ("BLOCKED") ("CANCELLED") ("SOMEDAY"))
              ("DONE" ("BLOCKED") ("CANCELLED") ("SOMEDAY")))))

(setq org-tag-alist '((:startgroup . nil)
                           ("@work" . ?w) ("@home" . ?h)
                           ("@errands" . ?e)
                           (:endgroup . nil)
                           ("computer" . ?c) ("kalyn" . ?k) ("phone" . ?p)))

(setq org-log-done 'time)

;; Next is for tasks, if a project is marked NEXT change it to TODO
(defun bh/mark-next-parent-tasks-todo ()
  "Visit each parent task and change NEXT states to TODO"
  (let ((mystate (or (and (fboundp 'org-state)
                          state)
                     (nth 2 (org-heading-components)))))
    (when mystate
      (save-excursion
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) (list "TODO" "NEXT" "DOING"))
            (org-todo "PROJECT")))))))

(add-hook 'org-after-todo-state-change-hook 'bh/mark-next-parent-tasks-todo 'append)
(add-hook 'org-clock-in-hook 'bh/mark-next-parent-tasks-todo 'append)

;; TODO: Add clock-in hook to change to STARTED

;; Priorities A-E
(setq org-enable-priority-commands nil)
(setq org-default-priority ?E)
(setq org-lowest-priority ?E)

(setq org-default-notes-file "~/Dropbox/todo/inbox.org")
(setq org-default-bookmarks-file "~/Dropbox/todo/bookmarks.org")
(setq jh/org-journal-file "~/Dropbox/todo/journal.org")
(setq jh/org-personal-file "~/Dropbox/todo/personal.org")

;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
(setq org-capture-templates
      (quote (("t" "todo" entry (file+headline org-default-notes-file "INBOX")
               "* TODO %?\n  %i\n" :clock-in t :clock-resume t)
              ("n" "note" entry (file+datetree org-default-notes-file)
               "* NOTE %?\n:PROPERTIES:\n:CREATED_AT: %U\n:END:\n" :clock-in t :clock-resume t)
              ("j" "Journal" entry (file+datetree jh/org-journal-file)
               "* %?\n%U\n" :clock-in t :clock-resume t)
              ("m" "Meeting" entry (file+datetree org-default-notes-file)
               "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("p" "Phone call" entry (file+datetree org-default-notes-file)
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("b" "Bookmark" entry (file org-default-bookmarks-file)
               "* %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n" :empty-lines 1)
              ("h" "Habit" entry (file+headline jh/org-personal-file "Habits")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"<%Y-%m-%d %a .+1d/3d>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))

(setq org-agenda-span 'week)

(setq org-agenda-files '("~/Dropbox/todo"))

(setq org-time-budgets '((:title "Business" :tags "+Datadog" :budget "30:00" :block workweek)
                      (:title "Sideprojects" :tags "+personal+project" :budget "14:00" :block week)
                      (:title "Exercise" :tags "+exercise" :budget "5:15" :block week)))

;; Turn on diary within org-mode
(setq org-agenda-include-diary t)

;; AGENDA

(setq org-agenda-insert-diary-extract-time t)

;; Keep tasks with dates on the global todo lists
(setq org-agenda-todo-ignore-with-date nil)

;; Keep tasks with deadlines on the global todo lists
(setq org-agenda-todo-ignore-deadlines nil)

;; Keep tasks with scheduled dates on the global todo lists
(setq org-agenda-todo-ignore-scheduled t)

;; Keep tasks with timestamps on the global todo lists
(setq org-agenda-todo-ignore-timestamp t)

;; Remove completed deadline tasks from the agenda view
(setq org-agenda-skip-deadline-if-done t)

;; Remove completed scheduled tasks from the agenda view
(setq org-agenda-skip-scheduled-if-done t)

;; Remove completed items from search results
(setq org-agenda-skip-timestamp-if-done nil)

;; Show all future entries for repeating tasks
(setq org-agenda-repeating-timestamp-show-all nil)

;; Show all agenda dates - even if they are empty
(setq org-agenda-show-all-dates t)

;; Sorting order for tasks on the agenda
(setq org-agenda-sorting-strategy
   (quote ((agenda habit-down time-up user-defined-up effort-up category-keep)
           (todo category-up effort-up)
           (tags category-up effort-up)
           (search category-up))))

           (setq org-agenda-custom-commands
                 '(("O" "Office block agenda"
                     ((agenda "" ((org-agenda-ndays 1)))
                                 ;; limits the agenda display to a single day
                      (tags-todo "@work|Datadog|phone")
                      (todo "TODO" ((org-agenda-files '("~/Dropbox/todo/inbox.org"))))
                                     ;; limits the tag search to the file inbox.org
                      (todo "BLOCKED"))
                     ((org-agenda-compact-blocks t)) ;; options set here apply to the entire block
                   )
                   ("A" "Custom agenda"
                     ((agenda "")
                      (org-time-budgets-for-agenda))
           	)
           	("b" "Projects"
           	 ((todo "PROJECT"))
           	)
           	("W" "Weekly Review"
                    ((agenda "" ((org-agenda-ndays 7))) ;; review upcoming deadlines and appointments
                                                      ;; type "l" in the agenda to review logged items
                     (stuck "") ;; review stuck projects as designated by org-stuck-projects
                     (todo "PROJECT") ;; review all projects (assuming you use todo keywords to designate projects)
                     (todo "MAYBE") ;; review someday/maybe items
                     (todo "WAITING")) ;; review waiting items
           	 )
           	("d" "Upcoming deadlines" agenda ""
                           ((org-agenda-time-grid nil)
                            (org-deadline-warning-days 365)        ;; [1]
                            (org-agenda-entry-types '(:deadline))  ;; [2]
                            ))
           	("c" "Calendar" agenda ""
                    ((org-agenda-ndays 7)                          ;; [1]
                     (org-agenda-start-on-weekday 0)               ;; [2]
                     (org-agenda-time-grid nil)
                     (org-agenda-repeating-timestamp-show-all t)   ;; [3]
                     (org-agenda-entry-types '(:timestamp :sexp))))  ;; [4]
           ))

;; Start the weekly agenda on Monday
(setq org-agenda-start-on-weekday 1)

;; Enable display of the time grid so we can see the marker for the current time
(setq org-agenda-time-grid (quote ((daily today remove-match)
                                #("----------------" 0 16 (org-heading t))
                                (0900 1100 1300 1500 1700 1900))))

;; Display tags farther right
(setq org-agenda-tags-column -102)

;;
;; Agenda sorting functions
;;
(setq org-agenda-cmp-user-defined 'bh/agenda-sort)

(defun bh/agenda-sort (a b)
"Sorting strategy for agenda items. Late deadlines first, then scheduled, then non-late deadlines"
(let (result num-a num-b)
 (cond
  ; time specific items are already sorted first by org-agenda-sorting-strategy

  ; non-deadline and non-scheduled items next
  ((bh/agenda-sort-test 'bh/is-not-scheduled-or-deadline a b))

  ; deadlines for today next
  ((bh/agenda-sort-test 'bh/is-due-deadline a b))

  ; late deadlines next
  ((bh/agenda-sort-test-num 'bh/is-late-deadline '> a b))

  ; scheduled items for today next
  ((bh/agenda-sort-test 'bh/is-scheduled-today a b))

  ; late scheduled items next
  ((bh/agenda-sort-test-num 'bh/is-scheduled-late '> a b))

  ; pending deadlines last
  ((bh/agenda-sort-test-num 'bh/is-pending-deadline '< a b))

  ; finally default to unsorted
  (t (setq result nil)))
 result))

(defmacro bh/agenda-sort-test (fn a b)
"Test for agenda sort"
`(cond
 ; if both match leave them unsorted
 ((and (apply ,fn (list ,a))
       (apply ,fn (list ,b)))
  (setq result nil))
 ; if a matches put a first
 ((apply ,fn (list ,a))
  (setq result -1))
 ; otherwise if b matches put b first
 ((apply ,fn (list ,b))
  (setq result 1))
 ; if none match leave them unsorted
 (t nil)))

(defmacro bh/agenda-sort-test-num (fn compfn a b)
`(cond
 ((apply ,fn (list ,a))
  (setq num-a (string-to-number (match-string 1 ,a)))
  (if (apply ,fn (list ,b))
      (progn
        (setq num-b (string-to-number (match-string 1 ,b)))
        (setq result (if (apply ,compfn (list num-a num-b))
                         -1
                       1)))
    (setq result -1)))
 ((apply ,fn (list ,b))
  (setq result 1))
 (t nil)))

(defun bh/is-not-scheduled-or-deadline (date-str)
(and (not (bh/is-deadline date-str))
    (not (bh/is-scheduled date-str))))

(defun bh/is-due-deadline (date-str)
(string-match "Deadline:" date-str))

(defun bh/is-late-deadline (date-str)
(string-match "\\([0-9]*\\) d\. ago:" date-str))

(defun bh/is-pending-deadline (date-str)
(string-match "In \\([^-]*\\)d\.:" date-str))

(defun bh/is-deadline (date-str)
(or (bh/is-due-deadline date-str)
   (bh/is-late-deadline date-str)
   (bh/is-pending-deadline date-str)))

(defun bh/is-scheduled (date-str)
(or (bh/is-scheduled-today date-str)
   (bh/is-scheduled-late date-str)))

(defun bh/is-scheduled-today (date-str)
(string-match "Scheduled:" date-str))

(defun bh/is-scheduled-late (date-str)
(string-match "Sched\.\\(.*\\)x:" date-str))

; position the habit graph on the agenda to the right of the default
(setq org-habit-graph-column 50)

; Make sure habits show up in the morning.
(run-at-time "06:00" 86400 '(lambda () (setq org-habit-show-habits t)))

;; Habit settings
(setq org-habit-preceding-days 14)
(setq org-habit-following-days 3)

; Setup encrypted entries
(require 'org-crypt)
; Encrypt all entries before saving
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
; GPG key to use for encryption
(setq org-crypt-key "E5C5C41A")
(setq org-crypt-disable-auto-save nil)

; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))

; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

;;;; Refile settings
; Exclude DONE state tasks from refile targets
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)

;; Diagram support

(setq org-ditaa-jar-path "/usr/local/opt/ditta/libexec/ditaa0_9.jar")
(setq org-plantuml-jar-path "/usr/local/opt/plantuml/plantuml.8092.jar")

(add-hook 'org-babel-after-execute-hook 'bh/display-inline-images 'append)

; Make babel results blocks lowercase
(setq org-babel-results-keyword "results")

(defun bh/display-inline-images ()
  (condition-case nil
      (org-display-inline-images)
    (error nil)))

(org-babel-do-load-languages
 (quote org-babel-load-languages)
 (quote ((emacs-lisp . t)
         (dot . t)
         (ditaa . t)
         (R . t)
         (python . t)
         (ruby . t)
         (gnuplot . t)
         (clojure . t)
         (sh . t)
         (ledger . t)
         (org . t)
         (plantuml . t)
         (latex . t))))

; Do not prompt to confirm evaluation
; This may be dangerous - make sure you understand the consequences
; of setting this -- see the docstring for details
(setq org-confirm-babel-evaluate nil)

; Use fundamental mode when editing plantuml blocks with C-c '
(add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))

#+END_SRC

*** Publish

#+BEGIN_SRC emacs-lisp
(setq org-publish-project-alist
           '(("orgfiles"
               :base-directory "~/Dropbox/todo/"
               :base-extension "org"
               :publishing-directory "/ssh:user@host:~/html/notebook/"
               :publishing-function org-html-publish-to-html
               ;; :exclude "PrivatePage.org"   ;; regexp
               :headline-levels 3
               :section-numbers nil
               :with-toc nil
               :html-head "<link rel=\"stylesheet\"
                       href=\"../other/mystyle.css\" type=\"text/css\"/>"
               :html-preamble t)))

#+END_SRC

*** Custom Functions

#+BEGIN_SRC emacs-lisp

(defun bh/hide-other ()
  (interactive)
  (save-excursion
    (org-back-to-heading 'invisible-ok)
    (hide-other)
    (org-cycle)
    (org-cycle)
    (org-cycle)))

(defun bh/set-truncate-lines ()
  "Toggle value of truncate-lines and refresh window display."
  (interactive)
  (setq truncate-lines (not truncate-lines))
  ;; now refresh window display (an idiom from simple.el):
  (save-excursion
    (set-window-start (selected-window)
                      (window-start (selected-window)))))


(defun bh/switch-to-scratch ()
  (interactive)
  (switch-to-buffer "*scratch*"))

(defun org-archive-done-tasks ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   "/DONE" 'tree))

#+END_SRC

*** Keymaps

#+BEGIN_SRC emacs-lisp
(setq org-ctrl-k-protect-subtree t)
(setq org-special-ctrl-k t)
(setq org-special-ctrl-a t)
(setq org-special-ctrl-e t)

(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key (kbd "<f12>") 'org-agenda)
;;(global-set-key (kbd "<f5>") 'bh/org-todo)
;;(global-set-key (kbd "<S-f5>") 'bh/widen)
;;(global-set-key (kbd "<f7>") 'bh/set-truncate-lines)
(global-set-key (kbd "<f8>") 'org-cycle-agenda-files)
;;(global-set-key (kbd "<f9> <f9>") 'bh/show-org-agenda)
(global-set-key (kbd "<f9> b") 'bbdb)
(global-set-key (kbd "<f9> c") 'calendar)
;;(global-set-key (kbd "<f9> f") 'boxquote-insert-file)
;;(global-set-key (kbd "<f9> g") 'gnus)
;;(global-set-key (kbd "<f9> h") 'bh/hide-other)
;;(global-set-key (kbd "<f9> n") 'bh/toggle-next-task-display)

;;(global-set-key (kbd "<f9> I") 'bh/punch-in)
;;(global-set-key (kbd "<f9> O") 'bh/punch-out)

;;(global-set-key (kbd "<f9> r") 'boxquote-region)
(global-set-key (kbd "<f9> s") 'bh/switch-to-scratch)

;;(global-set-key (kbd "<f9> t") 'bh/insert-inactive-timestamp)
;;(global-set-key (kbd "<f9> T") 'bh/toggle-insert-inactive-timestamp)

;;(global-set-key (kbd "<f9> v") 'visible-mode)
;;(global-set-key (kbd "<f9> l") 'org-toggle-link-display)
;;(global-set-key (kbd "<f9> SPC") 'bh/clock-in-last-task)
(global-set-key (kbd "C-<f9>") 'previous-buffer)
;;(global-set-key (kbd "M-<f9>") 'org-toggle-inline-images)
;;(global-set-key (kbd "C-x n r") 'narrow-to-region)
(global-set-key (kbd "C-<f10>") 'next-buffer)
(global-set-key (kbd "<f11>") 'org-clock-goto)
(global-set-key (kbd "C-<f11>") 'org-clock-in)
;;(global-set-key (kbd "C-s-<f12>") 'bh/save-then-publish)
(global-set-key (kbd "C-c c") 'org-capture)

#+END_SRC
